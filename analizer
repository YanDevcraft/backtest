import os
import json
import logging
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Tuple, Optional, Any
from docx import Document
from docx.shared import Inches

# Configuração de logging
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

console_handler = logging.StreamHandler()
file_handler = logging.FileHandler('analisador_snapshots.log')
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler.setFormatter(formatter)
file_handler.setFormatter(formatter)
logger.addHandler(console_handler)
logger.addHandler(file_handler)

# Configurações
BASE_DIR = Path(__file__).parent
SNAPSHOTS_DIR = BASE_DIR / 'snapshots'

# Estilo dos gráficos
sns.set_theme(style="whitegrid")
plt.rcParams['figure.figsize'] = (12, 6)
plt.rcParams['font.size'] = 12

class AnalisadorSnapshots:
    """Classe para análise de snapshots de trading e geração de relatório DOCX."""
    
    def __init__(self, diretorio_snapshots: str = SNAPSHOTS_DIR):
        """Inicializa o analisador com o diretório de snapshots."""
        self.diretorio_snapshots = Path(diretorio_snapshots)
        self.dados = []
        self.df = None
        
        logger.info(f"Analisador inicializado. Diretório de snapshots: {self.diretorio_snapshots.absolute()}")
        logger.info("Relatório será salvo como 'relatorio.docx' na pasta de origem")

    def carregar_snapshots(self) -> None:
        """Carrega e processa os arquivos de snapshot no formato JSON."""
        logger.info(f"Carregando snapshots de {self.diretorio_snapshots}")
        arquivos_json = list(self.diretorio_snapshots.glob('*.json'))
        
        if not arquivos_json:
            logger.warning(f"Nenhum arquivo JSON encontrado em {self.diretorio_snapshots}")
            return
            
        for arquivo in arquivos_json:
            self._processar_arquivo_json(arquivo)
            
        if self.dados:
            self.df = pd.DataFrame(self.dados)
            logger.info(f"Total de {len(self.df)} snapshots carregados")
            self.df = self.df.sort_values('score', ascending=False).reset_index(drop=True)
            self._calcular_metricas_avancadas()
            logger.info(f"Carregados {len(self.df)} snapshots com sucesso.")
        else:
            logger.warning("Nenhum snapshot válido encontrado.")

    def _processar_arquivo_json(self, caminho_arquivo: Path) -> None:
        """Processa um arquivo de snapshot no formato JSON."""
        try:
            with open(caminho_arquivo, 'r', encoding='utf-8') as f:
                dados = json.load(f)
            
            snapshot = {
                'arquivo': caminho_arquivo.name,
                'iteracao': dados.get('iteration', 0),
                'score': float(dados.get('score', 0)),
                'total_profit': float(dados.get('total_profit', 0)),
                'timestamp': pd.to_datetime(dados.get('timestamp', datetime.now().isoformat()))
            }
            
            stats = dados.get('stats', {})
            if stats:
                snapshot.update({
                    'win_rate': float(stats.get('win_rate', 0)),
                    'total_trades': int(stats.get('total_trades', 0)),
                    'winning_trades': int(stats.get('winning_trades', 0)),
                    'losing_trades': int(stats.get('losing_trades', 0)),
                    'profit_factor': float(stats.get('profit_factor', 0)),
                    'max_drawdown': float(stats.get('max_drawdown', 0)),
                    'sharpe_ratio': float(stats.get('sharpe_ratio', 0)),
                    'avg_profit_per_trade': float(stats.get('avg_profit_per_trade', 0)),
                    'max_profit': float(stats.get('max_profit', 0)),
                    'max_loss': float(stats.get('max_loss', 0)),
                    'total_fees': float(stats.get('total_fees', 0))
                })
            
            params = dados.get('parameters', {})
            if params:
                snapshot.update({
                    'tp_factor': float(params.get('TAKE_PROFIT_FACTOR', 0)),
                    'sl_factor': float(params.get('STOP_LOSS_FACTOR', 0)),
                    'grid_interval': float(params.get('GRID_INTERVAL', 0)),
                    'max_allocation': float(params.get('MAX_ALLOCATION_RATIO', 0)),
                    'min_atr': float(params.get('MIN_ATR', 0)),
                    'min_liquidity': float(params.get('MIN_LIQUIDITY_RATIO', 0))
                })
            
            self.dados.append(snapshot)
            logger.info(f"Processado snapshot: {caminho_arquivo.name} - Score: {snapshot['score']:.2f}, Lucro: ${snapshot['total_profit']:,.2f}")
            
        except Exception as e:
            logger.error(f"Erro ao processar {caminho_arquivo.name}: {e}", exc_info=True)

    def gerar_relatorio(self) -> None:
        """Gera o relatório de análise dos snapshots em formato DOCX."""
        if self.df is None or self.df.empty:
            logger.warning("Nenhum dado disponível para gerar relatório.")
            return
            
        logger.info("Gerando relatório DOCX...")
        doc = Document()
        doc.add_heading('Relatório de Análise de Trading', 0)
        
        # Seções do relatório
        self._adicionar_introducao(doc)
        self._adicionar_analise_desempenho(doc)
        self._adicionar_analise_risco(doc)
        self._adicionar_graficos(doc)
        self._adicionar_observacoes(doc)
        self._adicionar_previsoes(doc)
        self._adicionar_dicas(doc)
        self._adicionar_conclusao(doc)
        
        caminho_relatorio = BASE_DIR / "relatorio.docx"
        doc.save(str(caminho_relatorio))
        logger.info(f"Relatório DOCX gerado com sucesso: {caminho_relatorio}")

    def _adicionar_introducao(self, doc: Document) -> None:
        """Adiciona a introdução ao relatório."""
        doc.add_heading('1. Introdução', level=1)
        doc.add_paragraph(
            "Este relatório apresenta uma análise detalhada dos snapshots de trading gerados a partir das simulações realizadas. "
            "O objetivo é avaliar o desempenho da estratégia, identificar padrões de risco e fornecer insights acionáveis para otimização. "
            "Os dados analisados incluem métricas de lucro, risco e parâmetros de configuração, organizados em seções que abrangem análise de desempenho, "
            "análise de risco, gráficos ilustrativos, observações, previsões e recomendações práticas."
        )

    def _adicionar_analise_desempenho(self, doc: Document) -> None:
        """Adiciona a seção de análise de desempenho ao relatório."""
        doc.add_heading('2. Análise de Desempenho', level=1)
        total_snapshots = len(self.df)
        lucro_total = self.df['total_profit'].sum()
        lucro_medio = self.df['total_profit'].mean()
        win_rate_medio = self.df['win_rate'].mean() if 'win_rate' in self.df.columns else 0
        profit_factor_medio = self.df['profit_factor'].mean() if 'profit_factor' in self.df.columns else 0
        
        doc.add_paragraph(f"**Número de Snapshots Analisados:** {total_snapshots:,}")
        doc.add_paragraph(f"**Lucro Total Acumulado:** ${lucro_total:,.2f}")
        doc.add_paragraph(f"**Lucro Médio por Snapshot:** ${lucro_medio:,.2f}")
        doc.add_paragraph(f"**Win Rate Médio:** {win_rate_medio:.2%}")
        doc.add_paragraph(f"**Profit Factor Médio:** {profit_factor_medio:.2f}")
        
        melhor_snapshot = self.df.loc[self.df['total_profit'].idxmax()].to_dict()
        doc.add_heading('2.1 Melhor Snapshot', level=2)
        doc.add_paragraph(f"**Arquivo:** {melhor_snapshot.get('arquivo', 'N/A')}")
        doc.add_paragraph(f"**Iteração:** {melhor_snapshot.get('iteracao', 'N/A')}")
        doc.add_paragraph(f"**Lucro Total:** ${melhor_snapshot.get('total_profit', 0):,.2f}")
        doc.add_paragraph(f"**Win Rate:** {melhor_snapshot.get('win_rate', 0):.2%}")
        doc.add_paragraph(f"**Profit Factor:** {melhor_snapshot.get('profit_factor', 0):.2f}")

    def _adicionar_analise_risco(self, doc: Document) -> None:
        """Adiciona a seção de análise de risco ao relatório."""
        doc.add_heading('3. Análise de Risco', level=1)
        df_sorted = self.df.sort_values('iteracao').copy()
        df_sorted['lucro_acumulado'] = df_sorted['total_profit'].cumsum()
        df_sorted['drawdown'] = df_sorted['lucro_acumulado'].cummax() - df_sorted['lucro_acumulado']
        
        max_drawdown = df_sorted['drawdown'].max()
        max_drawdown_pct = (max_drawdown / df_sorted['lucro_acumulado'].max()) * 100 if df_sorted['lucro_acumulado'].max() > 0 else 0
        retorno_medio = df_sorted['total_profit'].mean()
        risco_retorno = df_sorted['total_profit'].std()
        sharpe_ratio = (retorno_medio / risco_retorno) * (252 ** 0.5) if risco_retorno > 0 else 0
        
        doc.add_paragraph(f"**Drawdown Máximo:** ${max_drawdown:,.2f} ({max_drawdown_pct:.2f}%)")
        doc.add_paragraph(f"**Índice de Sharpe:** {sharpe_ratio:.2f}")
        doc.add_paragraph(f"**Volatilidade:** ${risco_retorno:,.2f}")

    def _adicionar_graficos(self, doc: Document) -> None:
        """Adiciona gráficos diretamente ao documento DOCX."""
        if self.df is None or self.df.empty:
            return
            
        # Cria um buffer em memória para o gráfico
        import io
        
        # Gráfico de lucro acumulado e drawdown
        plt.figure(figsize=(10, 5))
        df_sorted = self.df.sort_values('iteracao')
        
        # Gráfico de lucro acumulado
        ax1 = plt.gca()
        ax1.plot(df_sorted['iteracao'], df_sorted['total_profit'].cumsum(), 'b-')
        ax1.set_xlabel('Iteração')
        ax1.set_ylabel('Lucro Acumulado (USDT)', color='b')
        
        # Gráfico de drawdown
        ax2 = ax1.twinx()
        ax2.fill_between(df_sorted['iteracao'], 
                        df_sorted['total_profit'].cumsum().cummax() - df_sorted['total_profit'].cumsum(), 
                        color='r', alpha=0.3)
        ax2.set_ylabel('Drawdown (USDT)', color='r')
        
        plt.title('Lucro Acumulado e Drawdown')
        
        # Salva o gráfico em um buffer em memória
        img_data = io.BytesIO()
        plt.savefig(img_data, format='png', dpi=100, bbox_inches='tight')
        img_data.seek(0)
        plt.close()
        
        # Adiciona o gráfico ao documento
        doc.add_heading('Gráficos de Desempenho', level=1)
        doc.add_picture(img_data, width=Inches(6))
        doc.add_paragraph("")
        
        # Limpa a memória
        img_data.close()
        
        # Distribuição de Lucros
        plt.figure(figsize=(10, 5))
        plt.hist(df_sorted['total_profit'], bins=20, alpha=0.7)
        plt.title('Distribuição de Lucros')
        plt.xlabel('Lucro (USDT)')
        plt.ylabel('Frequência')
        
        # Salva o gráfico em um buffer em memória
        img_data = io.BytesIO()
        plt.savefig(img_data, format='png', dpi=100, bbox_inches='tight')
        img_data.seek(0)
        plt.close()
        
        # Adiciona o gráfico ao documento
        doc.add_picture(img_data, width=Inches(6))
        doc.add_paragraph("")
        
        # Limpa a memória
        img_data.close()

    def _adicionar_observacoes(self, doc: Document) -> None:
        """Adiciona observações ao relatório."""
        doc.add_heading('5. Observações', level=1)
        doc.add_paragraph(
            "A análise revela uma consistência no desempenho da estratégia, com a maioria dos snapshots apresentando lucro positivo. "
            "A correlação entre score e lucro sugere que o score é um indicador confiável de desempenho."
        )

    def _adicionar_previsoes(self, doc: Document) -> None:
        """Adiciona previsões ao relatório."""
        doc.add_heading('6. Previsões', level=1)
        doc.add_paragraph(
            "Com base na tendência de lucro acumulado, espera-se que a estratégia continue gerando retornos positivos nas próximas iterações, "
            "desde que os níveis de risco sejam monitorados adequadamente."
        )

    def _adicionar_dicas(self, doc: Document) -> None:
        """Adiciona dicas ao relatório."""
        doc.add_heading('7. Dicas', level=1)
        doc.add_paragraph(
            "- Ajustar os parâmetros de take profit e stop loss para equilibrar lucro e risco.\n"
            "- Implementar uma gestão de risco mais rigorosa para reduzir o drawdown máximo."
        )

    def _adicionar_conclusao(self, doc: Document) -> None:
        """Adiciona a conclusão ao relatório."""
        doc.add_heading('8. Conclusão', level=1)
        doc.add_paragraph(
            "A estratégia de trading analisada demonstra potencial de lucratividade, com um desempenho sólido em vários snapshots. "
            "Recomenda-se otimizar os parâmetros e monitorar os riscos para maximizar os retornos a longo prazo."
        )

    def _calcular_metricas_avancadas(self) -> None:
        """Calcula métricas avançadas para análise."""
        if 'total_profit' in self.df.columns and 'total_trades' in self.df.columns:
            self.df['lucro_medio_por_trade'] = self.df['total_profit'] / self.df['total_trades'].replace(0, np.nan)

def main():
    """Função principal."""
    try:
        logger.info("Iniciando análise de snapshots...")
        analisador = AnalisadorSnapshots()
        analisador.carregar_snapshots()
        analisador.gerar_relatorio()
        logger.info("Análise concluída com sucesso!")
    except Exception as e:
        logger.error(f"Erro durante a execução: {e}", exc_info=True)
        raise

if __name__ == "__main__":
    main()
